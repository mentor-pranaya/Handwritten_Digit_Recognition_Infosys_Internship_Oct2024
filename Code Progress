-Done visualization 
-Working on preprocessing
CODE:

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.utils import to_categorical

# Load the MNIST dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Normalizing the images
train_images = train_images / 255.0
test_images = test_images / 255.0

# Converting labels to one-hot encoding
train_labels_cat = to_categorical(train_labels, 10)
test_labels_cat = to_categorical(test_labels, 10)

# Building a simple model
model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compiling the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Training the model
model.fit(train_images, train_labels_cat, epochs=3, batch_size=32)

# Evaluating the model
test_loss, test_acc = model.evaluate(test_images, test_labels_cat)
print(f'Test accuracy: {test_acc}')

# Visualizing one sample from the test data and its prediction
plt.imshow(test_images[0], cmap='gray')
plt.title(f'Prediction: {np.argmax(model.predict(test_images[0].reshape(1, 28, 28)))}')
plt.axis('off')
plt.show()
